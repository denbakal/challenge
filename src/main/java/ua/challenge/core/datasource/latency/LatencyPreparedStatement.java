package ua.challenge.core.datasource.latency;

import lombok.experimental.Delegate;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by d.bakal on 22.04.2017.
 */
public class LatencyPreparedStatement implements PreparedStatement {
    @Delegate(excludes = ExecutionAware.class)
    private final PreparedStatement realPreparedStatement;
    private final LatencySimulator latencySimulator;

    LatencyPreparedStatement(PreparedStatement realPreparedStatement, LatencySimulator latencySimulator) {
        this.realPreparedStatement = realPreparedStatement;
        this.latencySimulator = latencySimulator;
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        latencySimulator.simulate();
        return new LatencyResultSet(realPreparedStatement.executeQuery());
    }

    @Override
    public int executeUpdate() throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.executeUpdate();
    }

    @Override
    public boolean execute() throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.execute();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        latencySimulator.simulate();
        return new LatencyResultSet(realPreparedStatement.executeQuery(sql));
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.execute(sql);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.executeBatch();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        latencySimulator.simulate();
        return realPreparedStatement.execute(sql, columnNames);
    }

    // due-to @Delegate generic limitation

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return realPreparedStatement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return realPreparedStatement.isWrapperFor(iface);
    }
}
