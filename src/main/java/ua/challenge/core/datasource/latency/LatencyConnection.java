package ua.challenge.core.datasource.latency;

import lombok.experimental.Delegate;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Created by d.bakal on 22.04.2017.
 */
public class LatencyConnection implements Connection {
    @Delegate(excludes = LatencyConnection.SqlAware.class)
    private final Connection realConnection;
    private final LatencySimulator latencySimulator;

    public LatencyConnection(Connection realConnection, LatencySimulator latencySimulator) {
        this.realConnection = realConnection;
        this.latencySimulator = latencySimulator;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new LatencyPreparedStatement(realConnection.prepareStatement(sql), latencySimulator);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return new LatencyCallableStatement(realConnection.prepareCall(sql), latencySimulator);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return realConnection.nativeSQL(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new LatencyPreparedStatement(realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency), latencySimulator);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new LatencyCallableStatement(realConnection.prepareCall(sql, resultSetType, resultSetConcurrency), latencySimulator);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new LatencyPreparedStatement(realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency), latencySimulator);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new LatencyCallableStatement(realConnection.prepareCall(sql, resultSetType, resultSetConcurrency), latencySimulator);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new LatencyPreparedStatement(realConnection.prepareStatement(sql, autoGeneratedKeys), latencySimulator);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new LatencyPreparedStatement(realConnection.prepareStatement(sql, columnIndexes), latencySimulator);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new LatencyPreparedStatement(realConnection.prepareStatement(sql, columnNames), latencySimulator);
    }

    private interface SqlAware {
        PreparedStatement prepareStatement(String sql);

        CallableStatement prepareCall(String sql);

        String nativeSQL(String sql);

        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency);

        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency);

        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);

        PreparedStatement prepareStatement(String sql, int autoGeneratedKeys);

        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);

        PreparedStatement prepareStatement(String sql, String[] columnNames);

        PreparedStatement prepareStatement(String sql, int[] columnIndexes);
    }
}
