package ua.challenge.core.sql.tracker;

import lombok.experimental.Delegate;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Created by d.bakal on 22.04.2017.
 */
public class SqlCountConnection implements Connection {
    @Delegate(excludes = SqlAware.class)
    private Connection realConnection;

    private QueryHandler queryHandler = new QueryCountInfoHandler();

    public SqlCountConnection(Connection realConnection) {
        this.realConnection = realConnection;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareStatement(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareCall(sql);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.nativeSQL(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareStatement(sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        queryHandler.handleSql(sql);
        return realConnection.prepareStatement(sql, columnNames);
    }

    private interface SqlAware {
        PreparedStatement prepareStatement(String sql);

        CallableStatement prepareCall(String sql);

        String nativeSQL(String sql);

        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency);

        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency);

        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);

        PreparedStatement prepareStatement(String sql, int autoGeneratedKeys);

        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);

        PreparedStatement prepareStatement(String sql, String[] columnNames);

        PreparedStatement prepareStatement(String sql, int[] columnIndexes);
    }
}
